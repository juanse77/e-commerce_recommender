name: Tagged action
on:
  push:
    tags:
      - "**"
jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    environment: Docker_hub
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install dependencies
        run: poetry install
      - name: Testing
        run: poetry run pytest --junitxml=jest-junit.xml --cov=e_commerce --cov-report=lcov --cov-report=xml
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test
          path: jest-junit.xml
          reporter: java-junit
      - name: Coverage Report
        if: always()
        uses: devmasx/coverage-check-action@v1.2.0
        with:
          type: lcov
          result_path: coverage.lcov
          min_coverage: 70
          token: ${{ github.token }}
      - name: build
        run: poetry build
      - name: Publish to GH Releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            ${{ github.workspace }}/dist/*
      - name: Set up QEMU # The docker image is built and pushed to dockerhub
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set the value
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            version=${{ env.VERSION }}
          context: .
          file: ${{ github.workspace }}/docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/e-commerce_recommender:latest
  push_image_AWS:
    name: Build Image
    needs: Build
    runs-on: ubuntu-latest
    environment: AWS
    steps:
      - uses: actions/checkout@v3
      - uses: docker://ghcr.io/kciter/aws-ecr-action:latest
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          dockefile: data/Dockerfile
          repo: docker/repopublic.ecr.aws/a4q4t8c3/e-commerce_recommender
          region: us-west-2
          tags: latest,${{ github.sha }}
          create_repo: true
          image_scanning_configuration: true
          extra_build_args: |
            version=${{ env.VERSION }}
